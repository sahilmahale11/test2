# generated by datamodel-codegen:
#   filename:  dashboard.yaml
#   timestamp: 2023-08-11T11:26:55+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Issue(BaseModel):
    issue_id: Optional[int] = Field(None, description='ID of the issue.')
    issue_title: Optional[str] = Field(None, description='Name of the issue.')
    issue_description: Optional[str] = Field(
        None, description='Description of the issue.'
    )
    issue_type: Optional[str] = Field(None, description='Type of the issue.')
    url_path: Optional[str] = Field(None, description='URL path to the issue.')
    completion_score: Optional[float] = Field(None, description='Score of the issue.')
    child_issues: Optional[List[Issue]] = None


class RequirementDashboardResponse(BaseModel):
    __root__: List[Issue]


class PullRequest(BaseModel):
    pr_id: Optional[int] = Field(None, description='ID of the pull request.')
    pr_name: Optional[str] = Field(None, description='Name of the pull request.')
    run_id: Optional[int] = Field(
        None, description='Latest run ID of the pull request.'
    )
    branch_name: Optional[str] = Field(
        None, description='Name of the branch associated with the pull request.'
    )
    completion_score: Optional[float] = Field(
        None, description='Completion score of the pull request.'
    )


class PullRequestDashboardResponse(BaseModel):
    __root__: List[PullRequest]


class RunDetails(BaseModel):
    run_id: Optional[int] = Field(None, description='ID of the run.')
    completion_score: Optional[float] = Field(
        None, description='Completion score of the run.'
    )
    files: Optional[str] = Field(None, description='Files associated with the run.')
    content: Optional[str] = Field(None, description='Content of the run.')


class PullRequestDetails(BaseModel):
    pr_id: Optional[int] = Field(None, description='ID of the pull request.')
    pr_name: Optional[str] = Field(None, description='Name of the pull request.')
    branch_name: Optional[str] = Field(
        None, description='Name of the branch associated with the pull request.'
    )
    runs: Optional[List[RunDetails]] = None


class Action(Enum):
    jira_update = 'jira update'
    jira_create = 'jira create'


class PRUserActionRequest(BaseModel):
    pr_id: Optional[int] = Field(None, description='ID of the pull request.')
    action: Optional[Action] = Field(
        None, description='Action to be performed on the pull request'
    )


class ResponseMessage(BaseModel):
    message: Optional[str] = Field(None, description='ResponseMessage')


Issue.update_forward_refs()
