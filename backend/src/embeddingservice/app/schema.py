# generated by datamodel-codegen:
#   filename:  code_processing.yaml
#   timestamp: 2023-08-11T10:46:57+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Field
from enum import Enum as ENUM

class CodeType(ENUM):
    SCRIPT = 'SCRIPT'
    FUNCTION = 'FUNCTION'
    CLASS = 'CLASS'

class EmbedType(ENUM):
    TITLE = 'TITLE'
    BODY = 'BODY'

class Language(ENUM):
    PYTHON = 'PYTHON'
    CPP = 'CPP'
    JAVA = 'JAVA'
    
class IssueType(ENUM):
    EPIC = 'EPIC'
    STORY = 'STORY'
    TASK = 'TASK'
    BUG = 'BUG'

class LinkageStatusEnum(ENUM):
    NOT_STARTED = 'NOT_STARTED'
    INITIATED = 'INITIATED'
    FAILED = "FAILED"
    AWAITING_VALIDATION = 'AWAITING_VALIDATION'
    SUPPORTED = 'SUPPORTED'
    UNSUPPORTED = 'UNSUPPORTED'

class HumanVerification(ENUM):
    PASS = 'PASS'
    FAIL = 'FAIL'

class ResponseMessage(BaseModel):
    message: Optional[str] = Field(None, description='ResponseMessage')
